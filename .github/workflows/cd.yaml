name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development
      - staging
jobs:
  cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Env Variables Setup
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          case "$BRANCH_NAME" in
            development)
              REPO_NAME="leaseapp_development_repo"
              CONTAINER_PORT="5000"
              ;;
            staging)
              REPO_NAME="leaseapp_staging_repo"
              CONTAINER_PORT="5001"
              ;;
            main)
              REPO_NAME="leaseapp_production_repo"
              CONTAINER_PORT="5002"
              ;;
            *)
              echo "Unknown branch for deployment"
              exit 1
              ;;
          esac
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "CONTAINER_PORT=$CONTAINER_PORT" >> $GITHUB_ENV
          


      - name: Doctl Installation
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Conainer Build For code
        run: docker build --build-arg DEFAULT_PORT=$CONTAINER_PORT -t ${{ secrets.REGISTRY_NAME }}/${{ env.REPO_NAME }}:$(echo $GITHUB_SHA | head -c7) .
      
      - name: DigitalOcean Authentication
        run: doctl registry login --expiry-seconds 1200
      
      - name: Push Images
        run: docker push ${{ secrets.REGISTRY_NAME }}/${{ env.REPO_NAME }}:$(echo $GITHUB_SHA | head -c7)
      

      
      - name: Save k8's Clusetr 
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
      
      # - name: Ensure Kubernetes namespace
      #   run: kubectl get namespace lease-application || kubectl create namespace lease-application
      
      - name: Check if ingress Exists
        id: service-check
        run: |
          if kubectl get ingress ingress; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
          
      - name: Replace placeholders in Deployment YAML
        run: |
          TAG=$(echo ${GITHUB_SHA} | head -c 7)
          IMAGE_NAME="${{ secrets.REGISTRY_NAME }}/${{ env.REPO_NAME }}"
          sed -i "s|<IMAGE>|${IMAGE_NAME}:${TAG}|g; s|<CONTAINER_PORT>|${{ env.CONTAINER_PORT }}|g; s|<NAME>|${{ env.BRANCH_NAME }}|g" $GITHUB_WORKSPACE/Kubernetes/Deployment.yml

      - name: Replace placeholders in Service YAML
        run: sed -i "s|<CONTAINER_PORT>|${{ env.CONTAINER_PORT }}|g; s|<NAME>|${{ env.BRANCH_NAME }}|g" $GITHUB_WORKSPACE/Kubernetes/Service.yml
        
      - name: Deploy to Default namespace
        run: |
          kubectl apply -f $GITHUB_WORKSPACE/Kubernetes/Deployment.yml 
          # if [ "${{ steps.service-check.outputs.exists }}" == "false" ]; then
          kubectl apply -f $GITHUB_WORKSPACE/Kubernetes/Service.yml
          # kubectl apply -f $GITHUB_WORKSPACE/Kubernetes/ingress.yml
          # fi
      - name: Apply Ingress if it exists
        if: steps.service-check.outputs.exists == 'false'
        run: kubectl apply -f $GITHUB_WORKSPACE/Kubernetes/ingress.yml


